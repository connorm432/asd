
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/AEhNAcML"))()

function offlog()
    for _, v in pairs(getgc(true)) do
        if type(v) == 'table' and rawget(v, 'getIsMaxed') then
            v.addFlags = function(sf, ...)
                sf:setFlags(0)
                return
            end
            v.getIsMaxed = function()
                return false
            end
            v.getFlags = function()
                return 0
            end
        end
    end
end
offlog()
game.Players.LocalPlayer.CharacterAdded:connect(function()
    offlog()
end)
local fw = require(game.ReplicatedStorage.Framework.Nevermore);
syn_context_set(1)
local acc = fw("AntiCheatHandlerClient")
syn_context_set(7)
local func = acc.createNotification
hookfunc(func, function() return end)
local hook
hook = hookmetamethod(game, "__namecall", function(self, ...)
    if getnamecallmethod() == "FireServer" and self.Name == "LogKick" then
        return wait(9e9)
    end
    if getcallingscript() == "AntiCheatHandler" and getnamecallmethod() == "Destroy" then
        return wait(9e9)
    end
    
    return hook(self, ...)
end)
nhk = hookfunc(Instance.new, function(...)
    if getcallingscript() == "AntiCheatHandler" then
        return wait(9e9) end
    return nhk(...)
end)
lolz = hookfunc(task.spawn, function(...)
    if getcallingscript() == "AntiCheatHandler" then return wait(9e9) end
    return lolz(...)
end)
lolw = hookfunc(task.spawn, function(...)
    if getcallingscript() == "AntiCheatHandlerClient" then return wait(9e9) end
    return lolw(...)
end)
syn_context_set(1)
local acc = fw("Flag")
syn_context_set(7)

local func = acc.setFlags
local func1 = acc.addFlags
local func2 = acc.getIsMaxed
local func3 = acc.getFlags


hookfunc(func, function() return wait(9e9) end)
hookfunc(func1, function() return wait(9e9) end)
hookfunc(func2, function() return wait(9e9) end)
hookfunc(func3, function() return wait(9e9) end)
syn_context_set(1)
local khook
khook = hookmetamethod(game, "__namecall", function(self, ...)
    if getnamecallmethod() == "Kick" and not checkcaller() then
        return wait(9e9)
    end
    return khook(self, ...)
end)
hookfunc(string.format, function()
    if getcallingscript() == "AntiCheatHandler" then
        return 
    end
end)
hookfunc(fw("AntiCheatHandler").punish, function()
    return;
end)
local nvm = require(game.ReplicatedStorage.Framework.Nevermore)
local kb = nvm("RagdollHandlerClient")
local old = kb.toggleRagdoll
kb.toggleRagdoll = function(self, val)
    return old(self, val)
end
local hk
hk = hookmetamethod(game, "__namecall", function(self, ...)
    if getnamecallmethod() == "FireServer" and self.Name == "RagdollRemoteEvent" and getgenv().nr then
            return
    end
    return hk(self, ...)
end)
local hk2
hk2 = hookmetamethod(game, "__namecall", function(self, ...)
    args = {...}
    
    if getnamecallmethod() == "FireServer" and self.Name == '' and type(args[1]) == "number" and getgenv().nr then
            return
    end
    return hk2(self, ...)
end)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local mouse = Players.LocalPlayer:GetMouse()
local nevermore_modules = rawget(require(game.ReplicatedStorage.Framework.Nevermore), "_lookupTable")
local network = rawget(nevermore_modules, "Network")
local remotes_table = getupvalue(getsenv(network).GetEventHandler, 1)
local events_table = getupvalue(getsenv(network).GetFunctionHandler, 1)
local remotes = {}
for i,v in pairs(getgc(true)) do
   if type(v) == "table" and rawget(v,"Remote") then
       v.Remote.Name = v.Name
       
   end
   end

for _, tbl in ipairs(getgc(true)) do
	if typeof(tbl) == "table" and rawget(tbl, "Remote") then
		tbl.Remote.Name = tbl.Name
	end
end
local local_player = game:GetService("Players").LocalPlayer
local kick_hook; kick_hook = hookmetamethod(game, "__namecall", newcclosure(function(...)
	local args = {...}
	local self = args[1]
	local namecall_method = getnamecallmethod()
	if not checkcaller() and self == local_player and namecall_method == "Kick" then
		return
	end
	return kick_hook(...)
end))

local mouse = Players.LocalPlayer:GetMouse()

local function keydown(key)
	return game:GetService("UserInputService"):IsKeyDown(key)
end

local function GetClosest()
	local Character = game.Players.LocalPlayer.Character
	local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
	if not (Character or HumanoidRootPart) then return end

	local TargetDistance = math.huge
	local Target

	for i,v in ipairs(game.Players:GetPlayers()) do
		if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
			local TargetHRP = v.Character.HumanoidRootPart
			local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - TargetHRP.Position).magnitude
			if mag < TargetDistance then
				TargetDistance = mag
				Target = v
			end
		end
	end

	return Target
end


local function SecureSetProperty(Instance,Property,Value)
    for i,v in pairs(getconnections(Instance:GetPropertyChangedSignal(Property))) do
        v:Disable()
    end
    for i,v in pairs(getconnections(Instance.Changed)) do
        v:Disable()
    end
    if not Instance:FindFirstChild(Property) then
        Instance[Property] = Value
        return Instance:GetPropertyChangedSignal(Property):Connect(function()
            Instance[Property] = Value
        end)
    end
end

local function SpoofProperty(Instance,Property,Value)
    local OldIndex
    OldIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Key)
        if not checkcaller() and Self == Instance and Key == Property then
            return Value
        end
        return OldIndex(Self, Key)
    end))
end
local MainUI = UILibrary.Load("KhyBurd's Hub | Combat Warriors")
local FirstPage = MainUI.AddPage("Combat")
local SecondPage = MainUI.AddPage("Player")

FirstPage.AddLabel("Combat")
-- the good ol anticheat bypass
-- combat warriors has the most retarded anticheat on earth
for i,v in pairs(getgc(true)) do
    if typeof(v) == "table" and rawget(v, "kick") then
        v.kick =  function()
            return
        end
    end

    if typeof(v) == 'table' and rawget(v, 'getIsBodyMoverCreatedByGame') then
        v.getIsBodyMoverCreatedByGame = function(among)
            return true
        end
   end
   if typeof(v) == "table" and rawget(v, "randomDelayKick") then
        v.randomDelayKick = function()
            return wait(9e9)
        end
    end
end

table.foreach(remotes_table, function(i,v)
    if rawget(v, "Remote") then
        remotes[rawget(v, "Remote")] = i
    end
end)

table.foreach(events_table, function(i,v)
    if rawget(v, "Remote") then
        remotes[rawget(v, "Remote")] = i
    end
end)


-- the retards at combat warriors detect if you make changes to the names so this is the second best method
local pog
pog = hookmetamethod(game, "__index", function(self, key)
    if (key == "Name" or key == "name") and remotes[self] then
       return remotes[self]
    end

    return pog(self, key)
end)


local function getRemote(name)
    for i,v in pairs(remotes) do
        if i.Name == name then
            return i
        end
    end
end

-- took this from devforums
local function getClosest()
    local hrp = Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
    local closest_distance = math.huge
    local closestnigger

    for i,v in pairs(game.Players:GetPlayers()) do
        if v.Character ~= nil and v ~= Players.LocalPlayer and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v.Character:FindFirstChild("Humanoid").Health > 0 then
            local plr_pos = v.Character.HumanoidRootPart.Position
            local plr_distance = (hrp - plr_pos).Magnitude
    
            if plr_distance < closest_distance then
                closest_distance = plr_distance
                closestnigger = v
            end
        end
    end

    return closestnigger
end

-- modified some closest to mouse function from the devforums idfk where
local function getClosestToMouse()
    local player, nearestDistance = nil, math.huge
    for i,v in pairs(Players:GetPlayers()) do
        if v ~= Players.LocalPlayer and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local root, visible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if visible then
                local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(root.X, root.Y)).Magnitude

                if distance < nearestDistance then
                    nearestDistance = distance
                    player = v
                end
            end
        end
    end
    return player
end
local Killaura = false
FirstPage.AddToggle("Kill Aura", false, function(bool)
	Killaura = bool
	if bool == false then return end
	while Killaura do
		
		for i = 1,3 do
			local target = GetClosest().Character
			local character = game.Players.LocalPlayer.Character
			if character:FindFirstChildOfClass("Tool") and character:FindFirstChildOfClass("Tool"):FindFirstChild("Hitboxes") and target:FindFirstChild("Torso") and (character:FindFirstChildOfClass("Tool").Hitboxes.Hitbox.Position - target.Torso.Position).magnitude <= 10 and target.SemiTransparentShield.Transparency == 1 then
				local tool = character:FindFirstChildOfClass("Tool")
				local targetpart = target.Torso
				local hitbox = tool.Hitboxes.Hitbox
				local pos = tool.Hitboxes.Hitbox.Position --character.HumanoidRootPart.Position
				game:GetService("ReplicatedStorage").Communication.Events.MeleeSwing:FireServer(tool, i)
				game:GetService("ReplicatedStorage").Communication.Events.MeleeDamage:FireServer(tool, targetpart, hitbox, pos, CFrame.new(), Vector3.new(), Vector3.new())
				wait()
			end
		end
		
		wait(.4)
	end
end)
local canLoop = 0
FirstPage.AddToggle("No-Parry", false, function(val)
		    for i,v in pairs(getgc(true)) do
            if type(v) == "table" and rawget(v, "PARRY_COOLDOWN_IN_SECONDS") and rawget(v, "PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY") then
                if val then
                    v.PARRY_COOLDOWN_IN_SECONDS = 0
                    v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = 0
                else
                    v.PARRY_COOLDOWN_IN_SECONDS = 3
                    v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = 0.33
                end
            end
        end
end)

 
local WalkSpeed
local WalkSpeedValue = 16
SecondPage.AddToggle("Bypassed Walkspeed", false, function(bool)
		local character = game.Players.LocalPlayer.Character
	if bool then
		local hum = game.Players.LocalPlayer.Character.Humanoid
		SpoofProperty(hum,"WalkSpeed",WalkSpeedValue)
		for i,v in pairs(getconnections(hum:GetPropertyChangedSignal("WalkSpeed"))) do
			v:Disable()
		end
		for i,v in pairs(getconnections(hum.Changed)) do
			v:Disable()
		end
		hum.WalkSpeed = WalkSpeedValue
		WalkSpeed = hum:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
			hum.WalkSpeed = WalkSpeedValue
		end)
	else
		WalkSpeed:Disconnect()
	end
end)
SecondPage.AddSlider("WalkSpeed", {Min = 0, Max = 100, Def = 16}, function(value)
   WalkSpeedValue = value
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WalkSpeedValue
end)

local JumpPower
local JumpPowerValue = 16
SecondPage.AddToggle("Bypassed Jumpower", false, function(bool)
	local character = game.Players.LocalPlayer.Character
	if bool then
		local hum = game.Players.LocalPlayer.Character.Humanoid
		SpoofProperty(hum,"JumpPower",JumpPowerValue)
		for i,v in pairs(getconnections(hum:GetPropertyChangedSignal("JumpPower"))) do
			v:Disable()
		end
		for i,v in pairs(getconnections(hum.Changed)) do
			v:Disable()
		end
		hum.JumpPower = JumpPowerValue
		WalkSpeed = hum:GetPropertyChangedSignal("JumpPower"):Connect(function()
			hum.JumpPower = JumpPowerValue
		end)
	else
		JumpPower:Disconnect()
	end
end)
SecondPage.AddSlider("Jumpower", {Min = 0, Max = 100, Def = 50}, function(value)
   JumpPowerValue = value
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = JumpPowerValue
end)
SecondPage.AddToggle("Infinite Stamina", false, function(val)
  for i,v in pairs(getgc(true)) do
            if typeof(v) == "table" and rawget(v, "_setStamina") then
                local old = v._setStamina
                v._setStamina = function(among, us)
                    if val then
                        among._stamina = math.huge
                        among._staminaChangedSignal:Fire(150)
                    else
                        return old(among, us)
                    end
                end
            end
         end
end)


SecondPage.AddToggle("No Fire Damage", false, function(val)
antidamage = val
end)


SecondPage.AddToggle("Inf Jump", false, function(V)
    infjmp = V
end)
infjmp = false


-- SecondPage.AddToggle("No Fall Damage", false, function(val)
-- nofall = val
-- end)
game:GetService("UserInputService").JumpRequest:connect(function()
    if infjmp then
        game:GetService "Players".LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
    end
end)
local methodHook
methodHook = hookmetamethod(game, "__namecall", function(self, ...)
    if not checkcaller() and getnamecallmethod() == "FireServer" and antidamage and tostring(self) == "GotHitRE" then
        return
    elseif not checkcaller() and getnamecallmethod() == "FireServer" and nofall and self.Name == fallremote.Name then
        return
    elseif (getnamecallmethod() == "Kick" or getnamecallmethod() == "kick") and self == game.Players.LocalPlayer then
        return
    end
    return methodHook(self, ...)
end)

